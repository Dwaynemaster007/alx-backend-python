name: Django CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        # NOTE: Using a strong secret is recommended in a real project!
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: test_db
          MYSQL_USER: test_user
          MYSQL_PASSWORD: test_pass
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h 127.0.0.1 -u root -proot"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    env:
      DJANGO_SETTINGS_MODULE: messaging_app.settings
      MYSQL_HOST: 127.0.0.1
      MYSQL_PORT: 3306
      MYSQL_DB: test_db
      MYSQL_USER: test_user
      MYSQL_PASSWORD: test_pass

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      # --- Task 3: Install Linting/Coverage Tools ---
      - name: Install dependencies (including linting/coverage)
        run: |
          python -m pip install --upgrade pip
          pip install -r messaging_app/requirements.txt
          # Install flake8 and pytest-cov for Task 3
          pip install flake8 pytest-cov

      # --- Task 3: Run Code Quality Checks (Flake8) ---
      - name: Run Flake8 Linting
        run: |
          # Fails the build if any linting errors are detected
          flake8 messaging_app --statistics

      - name: Run migrations
        run: |
          python messaging_app/manage.py migrate

      # --- Task 2/3: Run Tests with Coverage ---
      - name: Run tests and generate coverage report
        run: |
          # Use --cov-report=xml for coverage XML, and ensure tests run against the correct settings
          pytest messaging_app --ds=messaging_app.settings --junitxml=report.xml --cov=messaging_app --cov-report=xml
          
      # --- Task 3: Upload Artifacts ---
      - name: Upload Test Report (JUnit)
        uses: actions/upload-artifact@v3
        with:
          name: test-report
          path: report.xml
          
      - name: Upload Code Coverage Report (XML)
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: coverage.xml